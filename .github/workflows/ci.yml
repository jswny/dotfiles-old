name: CI
on: [push]

env:
  PYTHON_VERSION: '3.8'

jobs:
  custom-lint:
    name: Custom Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: scripts/lint.sh --debug scripts/*.sh
  shellcheck:
    name: ShellCheck
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Run ShellCheck
        uses: ludeeus/action-shellcheck@0.3.0
        with:
          check_together: 'yes'
  vint:
    name: Vint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v1
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install Vint
        run: pip install vim-vint
      - name: Run Vint
        run: vint nvim/*.vim
  json-lint:
    name: JSON Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2-beta
        with:
          node-version: '12'
      - name: Install JSON Lint
        run: npm install -g jsonlint
      - name: Run JSON Lint
        run: find . -type f -name '*.json' -exec jsonlint -q -c {} \;
  yaml-lint:
    name: YAML Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v1
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install YAML Lint
        run: pip install yamllint
      - name: Run YAML Lint
        run: yamllint .
  hadolint:
    name: Hadolint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: brpaz/hadolint-action@master
  setup-macos:
    name: Setup on MacOS
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - name: Run setup
        run: scripts/setup.sh --debug
  setup-linux:
    name: Setup on Linux
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Remove Fonts
        run: sudo rm -rf /usr/share/fonts/cmap
      - name: Run setup
        run: scripts/setup.sh --debug
  docker:
    name: Docker Build and Push
    runs-on: ubuntu-latest
    needs: [custom-lint, shellcheck, vint, json-lint, hadolint]
    steps:
      - uses: actions/checkout@v2
      - name: Repo Metadata
        id: repo
        uses: actions/github-script@v3
        with:
          script: |
            const repo = await github.repos.get(context.repo)
            return repo.data
      - name: Prepare
        id: prep
        run: |
          REGISTRY='ghcr.io'
          DOCKER_IMAGE_NAME="${{ github.repository }}"
          DOCKER_IMAGE="${REGISTRY}/${DOCKER_IMAGE_NAME}"
          VERSION='noop'
          CHANNEL='stable'
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          elif [[ $GITHUB_REF == refs/heads/* ]]; then
            VERSION=$(echo ${GITHUB_REF#refs/heads/} | sed -r 's#/+#-#g')
            if [ "${{ github.event.repository.default_branch }}" = "$VERSION" ]; then
              VERSION=edge
            fi
          elif [[ $GITHUB_REF == refs/pull/* ]]; then
            VERSION=pr-${{ github.event.number }}
          fi
          TAGS="${DOCKER_IMAGE}:${VERSION}"
          if [[ $VERSION =~ ^v[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
            TAGS="$TAGS,${DOCKER_IMAGE}:latest"
          fi
          echo ::set-output name=registry::${REGISTRY}
          echo ::set-output name=version::${VERSION}
          echo ::set-output name=tags::${TAGS}
      - name: Cache Image Layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v1
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ${{ steps.prep.outputs.registry }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.CR_PAT }}
      - name: Build and Push to GitHub Container Registry
        uses: docker/build-push-action@v2
        with:
          push: ${{ github.event_name != 'pull_request' && (github.ref == format('refs/heads/{0}', github.event.repository.default_branch) || contains(github.ref, 'refs/tags')) }}
          tags: ${{ steps.prep.outputs.tags }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache,mode=max
          labels: |
            org.opencontainers.image.title=${{ fromJson(steps.repo.outputs.result).name }}
            org.opencontainers.image.description=${{ fromJson(steps.repo.outputs.result).description }}
            org.opencontainers.image.url=${{ fromJson(steps.repo.outputs.result).html_url }}
            org.opencontainers.image.source=${{ fromJson(steps.repo.outputs.result).html_url }}
            org.opencontainers.image.version=${{ steps.prep.outputs.version }}
            org.opencontainers.image.created=${{ steps.prep.outputs.created }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.licenses=${{ fromJson(steps.repo.outputs.result).license.spdx_id }}
